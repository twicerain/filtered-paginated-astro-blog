---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import type { GetStaticPathsOptions, Page } from 'astro';

import FormattedDate from '../../../components/FormattedDate.astro';
import BlogLayout from '../../../layouts/BlogLayout.astro';
import Pagination from '../../../components/Pagination.astro';
import Filtering from '../../../components/Filtering.astro';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const entries = (await getCollection('blog')).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );
  const tags = [...new Set(entries.flatMap((entry) => entry.data.tag))];

  return [
    ...paginate(entries, {
      pageSize: 1,
      props: { tags },
    }),

    ...tags.flatMap((tag) => {
      return paginate(
        entries.filter((entry) => entry.data.tag === tag),
        {
          params: { filter: tag },
          pageSize: 1,
          props: { tags, tag },
        }
      );
    }),
  ];
}

const { page, tags, tag } = Astro.props as {
  page: Page<CollectionEntry<'blog'>>;
  tags: CollectionEntry<'blog'>['data']['tag'][];
  tag: CollectionEntry<'blog'>['data']['tag'];
};
---

<BlogLayout>
  <section>
    <Filtering
      {tags}
      {tag}
    />
    <ul>
      {
        page.data.map((entry) => (
          <li>
            <a href={`/blog/${entry.slug}/`}>
              <img
                width={720}
                height={360}
                src={entry.data.heroImage}
                alt=''
              />
              <h4 class='title'>{entry.data.title}</h4>
              <p>{entry.data.tag}</p>
              <p class='date'>
                <FormattedDate date={entry.data.pubDate} />
              </p>
            </a>
          </li>
        ))
      }
    </ul>
  </section>
  {
    page.lastPage > 1 && (
      <Pagination
        {page}
        {tag}
      />
    )
  }
</BlogLayout>

<style>
  main {
    width: 960px;
  }
  ul {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  ul li {
    width: calc(50% - 1rem);
  }
  ul li * {
    text-decoration: none;
    transition: 0.2s ease;
  }
  ul li:first-child {
    width: 100%;
    margin-bottom: 1rem;
    text-align: center;
  }
  ul li:first-child img {
    width: 100%;
  }
  ul li:first-child .title {
    font-size: 2.369rem;
  }
  ul li img {
    margin-bottom: 0.5rem;
    border-radius: 12px;
  }
  ul li a {
    display: block;
  }
  .title {
    margin: 0;
    color: rgb(var(--black));
    line-height: 1;
  }
  .date {
    margin: 0;
    color: rgb(var(--gray));
  }
  ul li a:hover h4,
  ul li a:hover .date {
    color: rgb(var(--accent));
  }
  ul a:hover img {
    box-shadow: var(--box-shadow);
  }
  @media (max-width: 720px) {
    ul {
      gap: 0.5em;
    }
    ul li {
      width: 100%;
      text-align: center;
    }
    ul li:first-child {
      margin-bottom: 0;
    }
    ul li:first-child .title {
      font-size: 1.563em;
    }
  }
</style>
